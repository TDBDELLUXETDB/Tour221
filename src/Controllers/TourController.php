<?php
namespace App\Controllers;

use App\Models\Tour;
use App\Services\TourDBStorage;
use App\Views\TourTemplate;
use App\Config\Config;

class TourController {

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞ /Tours
    public function get(?int $id = null, array $filters = []): string {
        if (session_status() == PHP_SESSION_NONE) session_start();

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET –∑–∞–ø—Ä–æ—Å–∞
        $getFilters = [
            'from_city' => $_GET['from_city'] ?? '',
            'to_city' => $_GET['to_city'] ?? '',
            'dates' => $_GET['dates'] ?? ''
        ];

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É GET –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        $filters = array_merge($filters, $getFilters);

        // –û—Ç–ª–∞–¥–∫–∞
        error_log("üéØ TourController - GET parameters: " . print_r($_GET, true));
        error_log("üéØ TourController - Final filters: " . print_r($filters, true));

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        $model = $this->initModel();
        $data = $model->loadData();

        if (!is_array($data)) return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.";

        // –õ–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        $basketCount = 0;
        if (isset($_SESSION['basket']) && is_array($_SESSION['basket'])) {
            foreach ($_SESSION['basket'] as $item) {
                $basketCount += (int)($item['count_item'] ?? $item['quantity'] ?? 1);
            }
        }

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID —Ç—É—Ä–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É
        if ($id !== null) {
            $record = $data[$id - 1] ?? null;
            return TourTemplate::getCardTemplate($record);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        if (!empty(array_filter($filters))) {
            $data = $this->applyFilters($data, $filters);
            error_log("üéØ TourController - After filtering: " . count($data) . " tours");
        }

        // –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return TourTemplate::getAllTemplate(array_values($data), $basketCount, $filters);
    }

    // API: /api/tours –∏–ª–∏ /api/tours/{id}
    public function searchTours(): void {
        if (session_status() == PHP_SESSION_NONE) session_start();

        header('Content-Type: application/json');

        $fromCity = $_GET['from_city'] ?? null;
        $toCity = $_GET['to_city'] ?? null;
        $dates = $_GET['dates'] ?? null;
        $id = isset($_GET['id']) ? intval($_GET['id']) : null;

        $model = $this->initModel();
        $data = $model->loadData();
        if (!is_array($data)) {
            echo json_encode(['error' => '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö']);
            return;
        }

        if ($id !== null) {
            $tour = $data[$id - 1] ?? null;
            echo json_encode($tour ?? ['error' => '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω']);
            return;
        }

        $filtered = $this->applyFilters($data, [
            'from_city' => $fromCity,
            'to_city' => $toCity,
            'dates' => $dates
        ]);

        echo json_encode(array_values($filtered));
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    public function addToBasket(): void {
        if (session_status() == PHP_SESSION_NONE) session_start();
        if (!isset($_SESSION['basket'])) $_SESSION['basket'] = [];

        $TourId = $_POST['id'] ?? null;
        if ($TourId) {
            $_SESSION['basket'][$TourId] = [
                'id' => $TourId,
                'quantity' => ($_SESSION['basket'][$TourId]['quantity'] ?? 0) + 1
            ];
        }

        header('Location: /Tours');
        exit;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    private function initModel(): Tour {
        if (Config::STORAGE_TYPE === Config::TYPE_DB) {
            $serviceStorage = new TourDBStorage();
            return new Tour($serviceStorage, Config::TABLE_TourS);
        } else {
            $serviceStorage = new \App\Services\FileStorage(Config::FILE_TOURS);
            return new Tour($serviceStorage, '');
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    private function applyFilters(array $data, array $filters): array {
        $fromCity = $filters['from_city'] ?? null;
        $toCity = $filters['to_city'] ?? null;
        $dates = $filters['dates'] ?? null;

        error_log("üîç Applying filters - from_city: '{$fromCity}', to_city: '{$toCity}', dates: '{$dates}'");

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        if (empty($fromCity) && empty($toCity) && empty($dates)) {
            return $data;
        }

        return array_filter($data, function($tour) use ($fromCity, $toCity, $dates) {
            $match = true;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'name'
            if ($fromCity && isset($tour['name'])) {
                $tourCity = $tour['name'];
                // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if (strpos($tourCity, ' (') !== false) {
                    $tourCity = explode(' (', $tourCity)[0];
                }
                $match = $match && (stripos($tourCity, $fromCity) !== false);
                error_log("üîç From city check: '{$tourCity}' vs '{$fromCity}' -> " . ($match ? 'MATCH' : 'NO MATCH'));
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'destination'
            if ($toCity && isset($tour['destination'])) {
                $tourDestination = $tour['destination'];
                // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if (strpos($tourDestination, ' (') !== false) {
                    $tourDestination = explode(' (', $tourDestination)[0];
                }
                $match = $match && (stripos($tourDestination, $toCity) !== false);
                error_log("üîç To city check: '{$tourDestination}' vs '{$toCity}' -> " . ($match ? 'MATCH' : 'NO MATCH'));
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
            if ($dates && isset($tour['departure_date'])) {
                $parts = explode(' - ', $dates);
                if (count($parts) === 2) {
                    $start = strtotime(str_replace('.', '-', $parts[0]));
                    $end   = strtotime(str_replace('.', '-', $parts[1]));
                    $tourDate = strtotime($tour['departure_date']);
                    
                    $dateMatch = ($tourDate >= $start && $tourDate <= $end);
                    $match = $match && $dateMatch;
                    
                    error_log("üîç Date check: '{$tour['departure_date']}' in range '{$dates}' -> " . ($dateMatch ? 'MATCH' : 'NO MATCH'));
                }
            }

            error_log("üîç Final match for tour {$tour['id']}: " . ($match ? 'INCLUDED' : 'EXCLUDED'));
            return $match;
        });
    }

    public function getAllTours(): string {
        return $this->get(); // –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ get()
    }
}